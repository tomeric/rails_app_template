# rails new APP_NAME -m rails_template.rb

rvmrc = <<-RVMRC
rvm 1.9.3
rvm_gemset_create_on_use_flag=1
rvm_trust_rvmrcs=1
rvm gemset use #{app_name}
RVMRC

run "rvm 1.9.3@#{app_name} do gem install bundler --pre"

create_file ".rvmrc", rvmrc

# Generators:

initializer 'generators.rb', <<-RUBY
Rails.application.config.generators do |g|
  g.template_engine  :haml
  g.integration_tool :rspec
  g.test_framework   :rspec, fixture: false
  g.view_specs       false
  g.helper           false
  g.stylesheets      false
  g.javascripts      false
end
RUBY

# Database:

old_gem  = gem_for_database
@options = @options.merge database: 'postgresql'

gsub_file 'Gemfile', "gem '#{old_gem}'", "gem '#{gem_for_database}'"

remove_file 'config/database.yml'
template "config/databases/#{@options[:database]}.yml", 'config/database.yml'
run 'cp config/database.yml config/database.yml.example'

# Git:

gitignore = <<-GITIGNORE
# See http://help.github.com/ignore-files/ for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile ~/.gitignore_global

# Ignore configuration files
/config/*.yml

# Ignore bundler config
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp
GITIGNORE

remove_file '.gitignore'
create_file '.gitignore', gitignore

# Frontend:

gem 'haml-rails'
gem 'formtastic'
gem 'draper'

# BDD:

gem_group :test do
  gem 'spork'
  gem 'rspec-rails'
  gem 'turnip'
  gem 'capybara'
  gem 'factory_girl_rails'
  gem 'shoulda'
  gem 'database_cleaner'
  gem 'email_spec'
end

gem_group :development do
  gem 'guard'
  gem 'guard-bundler'
  gem 'guard-spork'
  gem 'guard-rspec'
  gem 'launchy'
  gem 'fuubar'
  gem 'growl'
  gem 'rb-inotify'
  gem 'rb-fchange'
end

spec_helper = <<-SPEC_HELPER
require 'rubygems'
require 'spork'

ENV["RAILS_ENV"] ||= 'test'

Spork.prefork do
  require File.expand_path('../../config/environment', __FILE__)
  require 'rspec/rails'
  
  RSpec.configure do |config|
    # == Mock Framework
    #
    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
    #
    # config.mock_with :mocha
    # config.mock_with :flexmock
    # config.mock_with :rr
    config.mock_with :rspec
    
    # If you're not using ActiveRecord, or you'd prefer not to run each of your
    # examples within a transaction, comment the following line or assign false
    # instead of true.
    config.use_transactional_fixtures = true
  end
end

Spork.each_run do
  # Requires supporting files with custom matchers and macros, etc,
  # in ./support/ and its subdirectories.
  Dir["#{File.dirname(__FILE__)}/support/**/*.rb"].each { |f| load f }
end
SPEC_HELPER

remove_file 'spec/spec_helper.rb'
create_file 'spec/spec_helper.rb', spec_helper

email_spec = <<-EMAIL_SPEC
require 'email_spec'

RSpec.configure do |config|
  config.include EmailSpec::Helpers
  config.include EmailSpec::Matchers
  
  config.before :suite do
    unless ActionMailer::Base.delivery_method.in? [:test, :activerecord, :cache, :file]
      ActionMailer::Base.register_observer(EmailSpec::TestObserver)
    end
    
    ActionMailer::Base.perform_deliveries = true
  end

  config.before type: :request do
    case ActionMailer::Base.delivery_method
      when :test  then ActionMailer::Base.deliveries.clear
      when :cache then ActionMailer::Base.clear_cache
    end
  end
  
  config.after type: :request do
    EmailSpec::EmailViewer.save_and_open_all_raw_emails  if ENV['SHOW_EMAILS']
    EmailSpec::EmailViewer.save_and_open_all_html_emails if ENV['SHOW_HTML_EMAILS']
    EmailSpec::EmailViewer.save_and_open_all_text_emails if ENV['SHOW_TEXT_EMAILS']
  end
end
EMAIL_SPEC


create_file 'spec/support/email_spec.rb', email_spec

database_cleaner = <<-DATABASE_CLEANER
require 'database_cleaner'

RSpec.configure do |config|
  config.before :suite do
    DatabaseCleaner.strategy = :truncation
    DatabaseCleaner.clean
  end
end
DATABASE_CLEANER

create_file 'spec/support/database_cleaner.rb', database_cleaner

factories = <<-FACTORIES
RSpec.configure do |config|
  config.include FactoryGirl::Syntax::Methods
end

FactoryGirl.define do
end
FACTORIES

create_file 'spec/support/factories.rb', factories

turnip = <<-TURNIP
require 'turnip/capybara'

Dir.glob("spec/acceptance/**/*_steps.rb") { |f| load f, true }
TURNIP

create_file 'spec/support/turnip.rb', turnip

guardfile = <<-GUARDFILE
guard 'bundler' do
  watch('Gemfile')
end

guard 'spork', cucumber: false, rspec_env: { 'RAILS_ENV' => 'test' } do
  watch('config/application.rb')
  watch('config/environment.rb')
  watch(%r{^config/environments/.+\.rb$})
  watch(%r{^config/initializers/.+\.rb$})
  watch('Gemfile')
  watch('Gemfile.lock')
  watch('spec/spec_helper.rb')
  watch('spec/support/factories.rb')
end

guard 'rspec',
  version: 2, turnip: true, all_after_pass: false, notification: true,
  cli: '--drb -r fuubar --format Fuubar' do
  watch(%r{^spec/.+_spec\.rb$})
  watch(%r{^lib/(.+)\.rb$})     { |m| "spec/lib/\#{m[1]}_spec.rb" }
  
  # Rails example
  watch(%r{^spec/.+_spec\.rb$})
  watch(%r{^spec/.+\.feature$})
  watch(%r{^app/(.+)\.rb$})                           { |m| "spec/\#{m[1]}_spec.rb" }
  watch(%r{^lib/(.+)\.rb$})                           { |m| "spec/lib/\#{m[1]}_spec.rb" }
  watch(%r{^app/controllers/(.+)_(controller)\.rb$})  { |m| ["spec/\#{m[2]}s/\#{m[1]}_\#{m[2]}_spec.rb"] }
  watch(%r{^spec/support/(.+)\.rb$})                  { "spec" }
  watch('spec/spec_helper.rb')                        { "spec" }
  watch('spec/factories.rb')                          { "spec" }
  watch(%r{^spec/.+_steps\.rb$})                      { "spec/acceptance"  }
  watch('app/controllers/application_controller.rb')  { "spec/controllers" }
  watch(%r{^app/views/.+$})                           { "spec/acceptance"  }
  watch(%r{^config/locales/.+$})                      { "spec/acceptance"  }
end
GUARDFILE

create_file 'Guardfile', guardfile

rspec = <<-RSPEC
--colour
--format s
-r turnip
RSPEC

create_file '.rspec', rspec

remove_file 'README'
remove_file 'doc/README_FOR_APP'
remove_file 'public/index.html'
remove_file 'app/assets/images/rails.png'

# Bundle and run generators

run "rvm 1.9.3@#{app_name} do bundle install"
run "rvm 1.9.3@#{app_name} do rake db:create:all"
run "rvm 1.9.3@#{app_name} do rails rspec:install"
run "rvm 1.9.3@#{app_name} do rails draper:install"


